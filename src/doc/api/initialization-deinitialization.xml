<?xml version="1.0" encoding="UTF-8"?>
<document>
	<title>Initialization / Deinitialization</title>

	Most C libraries require you to perform some sort of initialization.
	Proctal makes you have to create a handle that will have state
	associated with it. A handle should not be used in multiple threads but
	you can use different handles in different threads simultaneously.

	A handle can be created with a call to <quote>proctal_create</quote>.

	<code type="c">
proctal_t proctal = proctal_create();
	</code>

	This call may fail, for instance if your system has ran out of memory.
	You can check that it failed by calling <quote>proctal_error</quote>.
	If the returned code is 0, then the handle is ready to be used.
	Otherwise you cannot use the handle for anything else other than
	passing it to <quote>proctal_error</quote>,
	<quote>proctal_error_msg</quote> and <quote>proctal_destroy</quote>.

	With the handle created the first thing you will want to do is to hook
	into a program. This is done by passing its PID to
	<quote>proctal_set_pid</quote>.

	Here's how you would choose the program running as process 12345:

	<code type="c">
proctal_set_pid(proctal, 12345);
	</code>

	Now you're able to call functions that operate on a program.

	When you're done using the handle you must destroy it by passing it to
	<quote>proctal_destroy</quote>. Even when <quote>proctal_create</quote>
	fails you must still do it.

	<code type="c">
proctal_destroy(proctal);
	</code>
</document>
