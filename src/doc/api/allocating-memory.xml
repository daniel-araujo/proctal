<?xml version="1.0" encoding="UTF-8"?>
<document>
	<title>Allocating memory</title>

	To allocate memory in another program you must call the
	<quote>proctal_allocate</quote> function. It takes a handle and the
	number of bytes as arguments and returns an address to the start of the
	new memory location.

	<code type="c">
void *address = proctal_allocate(proctal, 8);
	</code>

	On failure the address will have the value <quote>NULL</quote>. Check
	the <link doc="error-handling.xml">Error handling</link> page to learn
	how to deal with an error.

	While the function may allocate more space than you had specified, you
	must only consider the number of bytes you specified as usable.

	Access permissions can be defined by calling the
	<quote>proctal_allocate_read_set</quote>,
	<quote>proctal_allocate_write_set</quote> and
	<quote>proctal_allocate_execute_set</quote> functions before
	<quote>proctal_allocate</quote>. By default all access permissions are
	set.

	<code type="c">
proctal_allocate_read_set(proctal, 1);
proctal_allocate_write_set(proctal, 1);
proctal_allocate_execute_set(proctal, 0);
	</code>

	To deallocate you must call the <quote>proctal_deallocate</quote>
	function. It takes a handle and the address to the start of the memory
	location as arguments.

	<code type="c">
proctal_deallocate(proctal, address);
	</code>
</document>
