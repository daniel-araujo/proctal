<?xml version="1.0" encoding="UTF-8"?>
<document>
	<title>Error handling</title>

	When an error occurs, the handle will keep track of a code that can
	identify the cause. In this state the handle should not be used by any
	other function that the ones described here.

	The code can be retrieved by calling the <quote>proctal_error</quote>
	function. It takes a handle as argument and returns a code.

	<code type="c">
int error_code = proctal_error(proctal);
	</code>

	When <quote>0</quote> is returned then it means that there is no error.

	Each error code has a corresponding macro definition:

	<list>
		<item>PROCTAL_ERROR_OUT_OF_MEMORY</item>
		<item>PROCTAL_ERROR_PERMISSION_DENIED</item>
		<item>PROCTAL_ERROR_WRITE_FAILURE</item>
		<item>PROCTAL_ERROR_READ_FAILURE</item>
		<item>PROCTAL_ERROR_UNKNOWN</item>
		<item>PROCTAL_ERROR_UNIMPLEMENTED</item>
		<item>PROCTAL_ERROR_UNSUPPORTED</item>
		<item>PROCTAL_ERROR_UNSUPPORTED_WATCH_READ</item>
		<item>PROCTAL_ERROR_UNSUPPORTED_WATCH_READ_EXECUTE</item>
		<item>PROCTAL_ERROR_UNSUPPORTED_WATCH_WRITE_EXECUTE</item>
		<item>PROCTAL_ERROR_UNSUPPORTED_WATCH_READ_WRITE_EXECUTE</item>
		<item>PROCTAL_ERROR_PROGRAM_NOT_FOUND</item>
		<item>PROCTAL_ERROR_PROGRAM_NOT_SET</item>
		<item>PROCTAL_ERROR_INJECTION_LOCATION_NOT_FOUND</item>
		<item>PROCTAL_ERROR_PROGRAM_SEGFAULT</item>
		<item>PROCTAL_ERROR_PROGRAM_EXITED</item>
		<item>PROCTAL_ERROR_PROGRAM_STOPPED</item>
		<item>PROCTAL_ERROR_PROGRAM_UNTAMEABLE</item>
		<item>PROCTAL_ERROR_PROGRAM_TRAPPED</item>
		<item>PROCTAL_ERROR_INTERRUPT</item>
		<item>PROCTAL_ERROR_PROGRAM_INTERRUPT</item>
	</list>

	Call the <quote>proctal_error_recover</quote> function to recover from
	an error. It takes a handle as argument and returns 1 on success and 0
	on failure.

	<code type="c">
int result = proctal_error_recover(proctal);
	</code>

	On success, the error code is cleared for the given handle, making it
	usable like normal again.

	On failure, the handle is deemed unusable and must be destroyed.

	You can also retrieve a description of the error in text by calling the
	<quote>proctal_error_message</quote> function. It takes a handle as
	argument and returns a pointer to a read-only C-style string.

	<code type="c">
const char *error_message = proctal_error_message(proctal);
	</code>

	If there is no error it returns a NULL pointer.

	<note>
		The error message is only meant for diagnostic purposes, such
		as logging and debugging. Don't actually show it to the user.
		Write messages that make sense in the context of your program.
	</note>
</document>
