<?xml version="1.0" encoding="UTF-8"?>
<document>
	<title>Watching memory</title>

	The API provides a way to get the value of the instruction pointer the
	moment after a memory address is read, written or executed.

	To choose the address you want to watch, you must call
	<quote>proctal_watch_set_address</quote>.

	Here's how you would set to watch the address <quote>81AC27</quote>.

	<code type="c">
proctal_watch_set_address(proctal, (void *) 0x81AC27);
	</code>

	To choose whether you want to watch for instructions that read, write
	or execute you can call <quote>proctal_watch_set_read</quote>,
	<quote>proctal_watch_set_write</quote> or
	<quote>proctal_watch_set_execute</quote>, respectively.

	Here's how you would watch for instructions that read and write but do
	not execute:

	<code type="c">
proctal_watch_set_read(proctal, 1);
proctal_watch_set_write(proctal, 1);
proctal_watch_set_execute(proctal, 0);
	</code>

	To start watching, you need to call <quote>proctal_watch_start</quote>.
	It will return 1 on success and 0 on failure. In case of failure, call
	<quote>proctal_error</quote> to find out what went wrong.

	<code type="c">
int result = proctal_watch_start(proctal);
	</code>

	To check if an instruction was found accessing the memory address, you
	need to call <quote>proctal_watch</quote>. On success it will write the
	address out.

	<code type="c">
void *address;
int result = proctal_watch(proctal, &amp;address);
	</code>

	It will return 1 on success and 0 on failure or if no instruction was
	detected yet.

	When 0 is returned, you should check whether it failed because of an
	error by calling <quote>proctal_error</quote>.

	<note>
		The address of the instruction that is returned may
		be the instruction that comes after the actual instruction that
		accessed the given memory location.
	</note>

	To stop watching, you need to call <quote>proctal_watch_stop</quote>.

	<code type="c">
proctal_watch_stop(proctal);
	</code>
</document>
