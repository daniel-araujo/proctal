<?xml version="1.0" encoding="UTF-8"?>
<document>
	<title>Watching memory</title>

	The API provides a way to get the value of the instruction pointer the
	moment after a memory address is read, written or executed.

	To choose the address you want to watch, you must call
	<quote>proctal_watch_address_set</quote>.

	Here's how you would set to watch the address <quote>81AC27</quote>.

	<code type="c">
proctal_watch_address_set(proctal, (void *) 0x81AC27);
	</code>

	To choose whether you want to watch for instructions that read, write
	or execute you can call <quote>proctal_watch_read_set</quote>,
	<quote>proctal_watch_write_set</quote> or
	<quote>proctal_watch_execute_set</quote>, respectively.

	Here's how you would watch for instructions that read and write but do
	not execute:

	<code type="c">
proctal_watch_read_set(proctal, 1);
proctal_watch_write_set(proctal, 1);
proctal_watch_execute_set(proctal, 0);
	</code>

	To start watching, you need to call <quote>proctal_watch_start</quote>.

	<code type="c">
proctal_watch_start(proctal);
	</code>

	You should call proctal_error to verify if this function succeeded.

	To check if an instruction was found accessing the memory address, you
	need to call <quote>proctal_watch</quote>.

	<code type="c">
void *address;
int result = proctal_watch(proctal, &amp;address);

if (proctal_error(proctal)) {
	// Error handling.
}
	</code>

	If a memory access was detected, it will return 1 and write out the
	address.

	If no memory access was detected, it will return 0. On failure it will
	also return 0 so you should call <quote>proctal_error</quote> to find
	out if the returned value 0 means failure.

	<note>
		The address of the instruction that is returned may
		be the instruction that comes after the actual instruction that
		accessed the given memory location.
	</note>

	To stop watching, you need to call <quote>proctal_watch_stop</quote>.

	<code type="c">
proctal_watch_stop(proctal);
	</code>
</document>
