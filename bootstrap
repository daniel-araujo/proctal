#!/bin/sh
###############################################################################
# This script is meant to be ran on a clean state of the git repository.
#
# This is written in Shell Command Language as defined by POSIX.1-2008.
###############################################################################

###############################################################################
# Fetches a git repository and checks out a commit. if a commit is not given,
# it checks out master.
#
# $1 = Directory where to check out.
# $2 = Git repository url.
# $3 = Optional commit to check out. Defaults to master.
###############################################################################
proctal_install_git_repository() {
	proctal_install_git_repository_destination="$1"
	proctal_install_git_repository_source="$2"
	proctal_install_git_repository_commit="${3:-master}"

	if test -e ${proctal_install_git_repository_destination}; then
		proctal_install_git_repository_args="-c advice.detachedHead=false --git-dir=${proctal_install_git_repository_destination}/.git --work-tree=${proctal_install_git_repository_destination}"

		if ! git ${proctal_install_git_repository_args} checkout -f "${proctal_install_git_repository_commit}" > /dev/null 2>&1; then
			git ${proctal_install_git_repository_args} remote set-url origin ${proctal_install_git_repository_source}
			git ${proctal_install_git_repository_args} fetch --all

			if test "$?" -ne 0; then
				echo "Failed to pull from ${proctal_install_git_repository_source}." 2>&1
				return 1
			fi

			git ${proctal_install_git_repository_args} checkout -f "${proctal_install_git_repository_commit}" > /dev/null

			if test "$?" -ne 0; then
				echo "Commit ${proctal_install_git_repository_commit} does not exist in repository ${proctal_install_git_repository_source}." 2>&1
				return 1
			fi
		fi

		git ${proctal_install_git_repository_args} clean -fdx > /dev/null
	else
		git clone "${proctal_install_git_repository_source}" "${proctal_install_git_repository_destination}"

		if test "$?" -ne 0; then
			echo "Failed to clone ${proctal_install_git_repository_source}" 2>&1
			return 1
		fi
	fi
}

###############################################################################
# Runs autoconf on a directory.
#
# $1 = Path to directory.
###############################################################################
proctal_run_autoconf() {
	proctal_run_autoconf_dir="$1"

	pushd "${proctal_run_autoconf_dir}" > /dev/null 2>&1

	if test "$?" -ne 0; then
		echo "Could not enter directory: ${proctal_run_autoconf_dir}" 2>&1
		return 1
	fi

	autoreconf -i

	if test "$?" -ne 0; then
		popd > /dev/null
		echo "Failed to run autoconf in ${proctal_run_autoconf_dir}" 2>&1
		return 1
	fi

	popd > /dev/null
}

# Install Darr repository if it doesn't exist.
if ! test -e darr; then
	echo "Installing Darr..."
	proctal_install_git_repository darr "https://github.com/daniel-araujo/darr.git" "v1.4.0" || exit 1
	proctal_run_autoconf darr || exit 1
fi

# Install Acur repository if it doesn't exist.
if ! test -e acur; then
	echo "Installing Acur..."
	proctal_install_git_repository acur "https://github.com/daniel-araujo/acur.git" "v1.0.1" || exit 1
	proctal_run_autoconf acur || exit 1
fi

# Initialize the autotools.
echo "Running autoconf..."
proctal_run_autoconf . || exit 1
